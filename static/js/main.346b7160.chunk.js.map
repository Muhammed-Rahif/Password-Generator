{"version":3,"sources":["components/DarkModeSwitch/DarkModeSwitch.module.css","components/PasswordGenCard/PasswordGenCard.module.css","contexts/Contexts.jsx","components/PasswordGenCard/PasswordGenCard.jsx","components/DarkModeSwitch/DarkModeSwitch.jsx","App.js","serviceWorkerRegistration.js","index.js"],"names":["module","exports","isDeviceLightTheme","window","matchMedia","matches","LightThemeContext","createContext","Contexts","children","useState","lightTheme","setLightTheme","Provider","value","PasswordGenCard","props","password","setPassword","passwordStrong","setPasswordStrong","passwordLength","setPasswordLength","copyBtnText","setCopyBtnText","useContext","handlePasswordChange","statusNum","getPassStatusByScore","passwordDetails","score","dark","className","styles","card","cardHeader","cardTitle","cardContent","placeholder","hint","counter","onChange","e","id","uncontrolled","length","parseInt","toString","passLengthInput","width","copyBtn","title","onClick","navigator","clipboard","writeText","setTimeout","bgColor","generateBtn","strongPass","passwordGenerator","generate","numbers","symbols","DarkModeSwitch","darkModeBtnWrapper","checked","darkMode","target","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.346b7160.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"darkModeBtnWrapper\":\"DarkModeSwitch_darkModeBtnWrapper__3FOcL\",\"darkModeBtn\":\"DarkModeSwitch_darkModeBtn__2nHLU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"PasswordGenCard_card__2QtFZ\",\"cardContent\":\"PasswordGenCard_cardContent__2cAFm\",\"cardHeader\":\"PasswordGenCard_cardHeader__2lllb\",\"cardTitle\":\"PasswordGenCard_cardTitle__2FBe-\",\"copyBtn\":\"PasswordGenCard_copyBtn__10djt\",\"generateBtn\":\"PasswordGenCard_generateBtn__44PW3\",\"password\":\"PasswordGenCard_password__2zi5q\"};","import React, { createContext, useState } from \"react\";\n\nconst isDeviceLightTheme =\n  window.matchMedia && window.matchMedia(\"(prefers-color-scheme: light)\").matches;\n\nexport const LightThemeContext = createContext(isDeviceLightTheme);\n\nfunction Contexts({ children }) {\n  const [lightTheme, setLightTheme] = useState(isDeviceLightTheme);\n\n  return (\n    <LightThemeContext.Provider value={{ lightTheme, setLightTheme }}>\n      {children}\n    </LightThemeContext.Provider>\n  );\n}\n\nexport default Contexts;\n","import React, { useContext, useState } from \"react\";\nimport styles from \"./PasswordGenCard.module.css\";\nimport { TextField, Card, Button, CardHeader, CardContent, H5 } from \"ui-neumorphism\";\nimport passwordDetails from \"zxcvbn\";\nimport { LightThemeContext } from \"../../contexts/Contexts\";\nimport passwordGenerator from \"generate-password\";\n\nfunction PasswordGenCard(props) {\n  const [password, setPassword] = useState(\"\");\n  const [passwordStrong, setPasswordStrong] = useState(\"Enter a password or generate!\");\n  const [passwordLength, setPasswordLength] = useState(8);\n  const [copyBtnText, setCopyBtnText] = useState(\"Copy\");\n\n  const { lightTheme } = useContext(LightThemeContext);\n\n  const getPassStatusByScore = statusNum => {\n    switch (statusNum) {\n      case 0:\n        return \"Too weak!\";\n      case 1:\n        return \"Weak!\";\n      case 2:\n        return \"Medium!\";\n      case 3:\n        return \"Good!\";\n      case 4:\n        return \"Strong!\";\n      default:\n        return \"Something wrong!\";\n    }\n  };\n\n  const handlePasswordChange = password => {\n    setPassword(password);\n    setPasswordStrong(getPassStatusByScore(passwordDetails(password).score));\n  };\n\n  return (\n    <Card dark={!lightTheme} className={styles.card}>\n      <CardHeader className={styles.cardHeader}>\n        <H5 className={styles.cardTitle}>\n          <small>Generate a super</small>\n          <br />\n          <strong>strong password!</strong>\n        </H5>\n      </CardHeader>\n      <CardContent className={styles.cardContent}>\n        <TextField\n          placeholder=\"Click generate...\"\n          hint={passwordStrong}\n          counter={passwordLength}\n          onChange={e => handlePasswordChange(e.value)}\n          value={password}\n          id=\"password-input\"\n          uncontrolled\n          className={styles.password}\n        />\n        <TextField\n          onChange={e => {\n            let length = parseInt(e.value);\n            if (!length) return setPasswordLength(0);\n            setPasswordLength(length > 64 ? 64 : length);\n          }}\n          value={passwordLength.toString()}\n          className={styles.passLengthInput}\n          width={50}\n          uncontrolled\n        />\n      </CardContent>\n      <CardContent>\n        <Button\n          className={styles.copyBtn}\n          title=\"Password length\"\n          onClick={() => {\n            setCopyBtnText(\"Copied!\");\n            navigator.clipboard.writeText(password);\n            setTimeout(() => {\n              setCopyBtnText(\"Copy\");\n            }, 2500);\n          }}\n          bgColor=\"var(--success)\"\n        >\n          {copyBtnText}\n        </Button>\n        <Button\n          className={styles.generateBtn}\n          title=\"Password length\"\n          onClick={() => {\n            setPasswordLength(passwordLength < 12 ? 12 : passwordLength);\n            let strongPass = passwordGenerator.generate({\n              length: passwordLength < 12 ? 12 : passwordLength,\n              numbers: true,\n              symbols: true,\n            });\n            handlePasswordChange(strongPass);\n          }}\n          bgColor=\"var(--info)\"\n        >\n          Generate\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default PasswordGenCard;\n","import React, { useContext } from \"react\";\nimport { Subtitle2, Switch } from \"ui-neumorphism\";\nimport { LightThemeContext } from \"../../contexts/Contexts\";\nimport styles from \"./DarkModeSwitch.module.css\";\n\nfunction DarkModeSwitch(props) {\n  const { lightTheme, setLightTheme } = useContext(LightThemeContext);\n\n  const toggleTheme = darkMode => {\n    setLightTheme(!darkMode);\n  };\n\n  return (\n    <div className={styles.darkModeBtnWrapper}>\n      <Subtitle2 dark={!lightTheme}>Dark Mode</Subtitle2>\n      <Switch\n        dark={!lightTheme}\n        checked={!lightTheme}\n        onClick={e => toggleTheme(e.target.checked)}\n      />\n    </div>\n  );\n}\n\nexport default DarkModeSwitch;\n","import React, { useContext } from \"react\";\nimport \"./App.css\";\nimport PasswordGenCard from \"./components/PasswordGenCard/PasswordGenCard\";\nimport { Card } from \"ui-neumorphism\";\nimport { LightThemeContext } from \"./contexts/Contexts\";\nimport DarkModeBtn from \"./components/DarkModeSwitch/DarkModeSwitch\";\n\nfunction App() {\n  const { lightTheme } = useContext(LightThemeContext);\n\n  return (\n    <Card dark={!lightTheme} className=\"App\">\n      <PasswordGenCard />\n      <DarkModeBtn />\n    </Card>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport \"ui-neumorphism/dist/index.css\";\nimport Contexts from \"./contexts/Contexts\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Contexts>\n      <App />\n    </Contexts>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}